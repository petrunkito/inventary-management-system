@using InventaryManagementSystem.helpers.SuppliersHelpers
@inject ISnackbar Snackbar
<MudDialog>
    <DialogContent>
        <MudTextField  @bind-Value="SupplierDetail.Name" T="string" Label="Nombre" Immediate="true" MaxLength="50"
            Counter="50" />
        <MudTextField @bind-Value="SupplierDetail.NumberPhone" T="string" Mask="@(new PatternMask("0000-0000"))" Label="Número de telefono" Immediate="true" MaxLength="9"
            Counter="9" />
        <MudTextField @bind-Value="SupplierDetail.Address" T="string" Label="Dirección" Immediate="true"
            MaxLength="150" Counter="150" Lines="5" Variant="Variant.Text" Adornment="Adornment.End" />
    </DialogContent>

    <DialogActions>
        @if (ButtonOptions == ButtonsDialog.CreateAndCancel)
        {
            <MudButton Color="Color.Primary" OnClick="CreateOrSaveChanges">Crear</MudButton>
        }
        else
        {
            <MudButton Color="Color.Info" OnClick="CreateOrSaveChanges">Guardar</MudButton>
        }
        <MudButton Color="Color.Error" OnClick="Cancel">Cancelar</MudButton>
    </DialogActions>
</MudDialog>

@code {    


    [CascadingParameter]
    private IMudDialogInstance MudDialog { get; set; } = default!;

    [Parameter]
    public SupplierDetail SupplierDetail { get; set; } = new();

    [Parameter]
    public ButtonsDialog ButtonOptions { get; set; } = ButtonsDialog.CreateAndCancel;

    protected override async Task OnInitializedAsync()
    {
        await MudDialog.SetOptionsAsync(new DialogOptions
        {
            CloseOnEscapeKey = true,
            FullWidth = true,
            CloseButton = true,
            MaxWidth = MaxWidth.ExtraSmall
        });
    }

    private void Cancel() => MudDialog.Cancel();

    private void CreateOrSaveChanges()
    {
        MudDialog.Close(DialogResult.Ok<SupplierDetail>(SupplierDetail));
    }

}
